<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dksys.biz.user.sm.sm02.mapper.SM02Mapper">

	<select id= "selectCmnCodeList" resultType="CamelMap">
		SELECT CODE_ID, CODE_NM, CODE_KIND, CODE_DESC
		FROM TB_CM05M01 
		WHERE
		CODE_KIND IN ( #{wh})
	</select>
	
	<select id= "selectDtlCmnCodeList" resultType="CamelMap">
		SELECT CODE_ID, CODE_NM, CODE_KIND, CODE_DESC
		FROM TB_CM05M01 
		WHERE
		CODE_KIND IN ( #{wh}, #{co}, #{makr}, #{owner}, #{selltype}, #{prdtimp} )
	</select>
	
	<select id= "selectClntSearchList" resultType="CamelMap">
		SELECT CLNT_CD, CLNT_NM FROM TB_BM02M01
		<if test="clntCd != null and !clntCd.equals('') or clntNm != null and !clntNm.equals('')">
			WHERE CLNT_CD LIKE '%${clntCd}%'
			  AND CLNT_NM LIKE '%${clntNm}%'
		</if>
	</select>

	<select id= "selectPrdtSearchList" resultType="CamelMap">
		SELECT PRDT_CD, PRDT_NM FROM TB_BM01M01
		<if test="prdtCd != null and !prdtCd.equals('') or prdtNm != null and !prdtNm.equals('')">
			WHERE PRDT_CD LIKE '%${prdtCd}%'
			  AND PRDT_NM LIKE '%${prdtNm}%'
		</if>
	</select>
	
	<select id="selectUprCount" parameterType="Map" resultType="int">
		SELECT
			COUNT(*)
		FROM TB_SM02M01 A
		  LEFT OUTER JOIN TB_SD05M01 SD05 ON SD05.PRJCT_CD = A.PRJCT_CD
		WHERE 1=1 
		<if test="coCd != null and !coCd.equals('')">
		 		AND OUT_CO_CD = #{coCd}
		 </if>
		<if test="strtDt != null and !strtDt.equals('') and endDt != null and !endDt.equals('')">
	            AND TRST_DT BETWEEN #{strtDt} AND #{endDt}
		</if>
		<if test="outCoCd != null and !outCoCd.equals('')">
		 		AND SELPCH_CD = #{selpchCd}
		 </if>
		 <if test="inCoCd != null and !inCoCd.equals('')">
				AND PRDT_IMP_YN = #{prdtImpYn}
		</if>
		 <if test="prjctCd != null and !prjctCd.equals('')">
				AND A.PRJCT_CD = #{prjctCd}
		</if>
		<if test="prjctNm != null and !prjctNm.equals('')">
		        AND SD05.PRJCT_NM LIKE '%' || #{prjctNm} || '%'
		</if>
		ORDER BY TRST_NO
	</select>

	<select id="selectStockMoveStatMngmList" parameterType="Map" resultType="CamelMap">
		SELECT *
			FROM(
				SELECT
						ROWNUM AS RNUM, D.*
				FROM(		
				SELECT
					 A.TRST_NO
					,A.OUT_CO_CD
					,FN_CM05M01_CD_TO_NM(A.OUT_CO_CD) AS OUT_CO_NM
					,A.OUT_WH_CD
					,FN_CM05M01_CD_TO_NM(A.OUT_WH_CD) AS OUT_WH_NM
					,A.OWNER_CD
					,FN_CM05M01_CD_TO_NM(A.OWNER_CD) AS OWNER_NM
					,A.TYP_CD
					,FN_CM05M01_CD_TO_NM(A.TYP_CD) AS TYP_NM
					,A.PRJCT_CD
					,(SELECT PRJCT_NM FROM TB_SD05M01 WHERE PRJCT_CD = A.PRJCT_CD ) AS PRJCT_NM
					,A.MAKR_CD
					,FN_CM05M01_CD_TO_NM(A.MAKR_CD) AS MAKR_NM
					,A.PRDT_CD
					,C.PRDT_NM 
					,A.PRDT_SIZE
					,A.PRDT_SPEC
					,A.PRDT_LEN
					,A.IMP_YN
					,FN_CM05M01_CD_TO_NM(A.IMP_YN ) AS IMP_NM
					,A.MOVE_QTY AS MO_WH
					,A.STD_UPR
					,A.IN_CO_CD
					,FN_CM05M01_CD_TO_NM(A.IN_CO_CD) AS IN_CO_NM
					,A.IN_TYP_CD
					,FN_CM05M01_CD_TO_NM(A.IN_TYP_CD) AS IN_TYP_NM
					,A.IN_WH_CD
					,FN_CM05M01_CD_TO_NM(A.IN_WH_CD) AS IN_WH_NM
					,A.IN_PRJCT_CD
					,(SELECT PRJCT_NM FROM TB_SD05M01 WHERE PRJCT_CD = A.IN_PRJCT_CD ) AS IN_PRJCT_NM
					,A.IN_PRDT_CD
					,(SELECT PRDT_NM FROM TB_BM01M01 C WHERE C.PRDT_CD = A.IN_PRDT_CD) AS IN_PRDT_NM
					,A.IN_PRDT_SIZE
					,A.IN_PRDT_SPEC
					,A.IN_PRDT_LEN
					,TO_CHAR(TO_DATE(A.TRST_DT, 'YYYYMMDD'),'YYYY-MM-DD') AS TRST_DT
					,A.UDT_DTTM
					,TO_CHAR(A.CREAT_DTTM,'YYYY-MM-DD') AS CREAT_DTTM
					,A.RMK
					,A.TRANS_AMT
					,A.TRANS_SEQ
					,C.PRDT_GRP AS PRDT_GRP
					,A.MOVE_WT
					,A.MOVE_QTY
					,A.CLNT_CD
					,A.STOCK_UPR
					,A.STD_UPR
					,A.PCHS_UPR
					,A.SELL_UPR
					,NVL(A.ERR_COREC_YN, 'Y') AS ERR_COREC_YN
				FROM TB_SM02M01 A, TB_BM01M01 C
				WHERE A.PRDT_CD = C.PRDT_CD
				<if test="coCd != null and !coCd.equals('')">
		 			AND OUT_CO_CD = #{coCd}
		 		</if>
				<if test="strtDt != null and !strtDt.equals('') and endDt != null and !endDt.equals('')">
					AND TRST_DT BETWEEN #{strtDt} AND #{endDt}
				</if>
				<if test="outWhCd != null and !outWhCd.equals('')">
					AND OUT_WH_CD = #{outWhCd}
				 </if>
				 <if test="inWhCd != null and !inWhCd.equals('')">
					AND IN_WH_CD = #{inWhCd}
				</if>
			     <if test="prjctCd != null and !prjctCd.equals('')">
						AND A.PRJCT_CD = #{prjctCd}
				</if>
			     <if test="prdtCd != null and !prdtCd.equals('')">
						AND A.PRDT_CD = #{prdtCd}
				</if>
			     <if test="prdtNm != null and !prdtNm.equals('')">
						AND C.PRDT_NM LIKE '%'||UPPER(#{prdtNm}) ||'%'
				</if>
				<if test="prdtGrp != null and !prdtGrp.equals('')">
					AND C.PRDT_GRP = #{prdtGrp}
				</if>
				<!-- <if test="taxivcCoprt != null and !taxivcCoprt.equals('')">
					AND #{taxivcCoprt} = (SELECT SD05.COPRT_CD 
									FROM TB_SD05M01 SD05
									WHERE SD05.PRJCT_CD = A.PRJCT_CD)
				</if> 판매법인 -->
				ORDER BY A.TRST_NO
			) D
			WHERE  1= 1 
			     <if test="prjctNm != null and !prjctNm.equals('')">
						AND ( D.PRJCT_NM    LIKE '%' || #{prjctNm} || '%'
						  OR  D.IN_PRJCT_NM LIKE '%' || #{prjctNm} || '%' )
				</if>
		)
		WHERE
			RNUM BETWEEN #{firstIndex} AND #{lastIndex}
	</select>
	
	<select id="selectStockTernKeykMovePchListCount" parameterType="Map" resultType="int">
		SELECT
			COUNT(*)
			FROM (
				SELECT
						ROWNUM AS RNUM, D.*
				FROM(		
					SELECT T1.* 
					FROM
					(SELECT 
						'TYPE2' AS T_TYPE
						,'매입' AS LIST_GB
						, A.TRST_CERTI_NO
						, null AS TRST_NO
						, A.CO_CD
						, FN_CM05M01_CD_TO_NM(A.CO_CD) AS CO_NM
						, A.WH_CD
						, FN_CM05M01_CD_TO_NM(A.WH_CD) WH_NM
						, A.MAKR_CD
						, A.OWNER_CD
						, FN_CM05M01_CD_TO_NM(A.OWNER_CD) AS OWNER_NM
						, A.TYP_CD
						, FN_CM05M01_CD_TO_NM(A.TYP_CD) AS TYP_NM
						, A.SELPCH_CD
						, A.PRJCT_CD
						, TO_CHAR(TO_DATE(A.TRST_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS TRST_DT
						, A.PRJCT_CD
						, (SELECT PRJCT_NM FROM TB_SD05M01 WHERE PRJCT_CD = A.PRJCT_CD ) AS PRJCT_NM
						, TO_NUMBER((SELECT CODE_ETC  FROM TB_CM05M01 WHERE CODE_ID = (SELECT CODE_ETC FROM TB_CM05M01 WHERE CODE_ID = A.WH_CD))) AS TRST_CLNT_CD
						, (SELECT CLNT_NM FROM TB_BM02M01 WHERE CLNT_CD = (SELECT CODE_ETC  FROM TB_CM05M01 WHERE CODE_ID = (SELECT CODE_ETC FROM TB_CM05M01 WHERE CODE_ID = A.WH_CD))) AS TRST_CLNT_NM
						, A.TRST_PRDT_CD
						,(SELECT PRDT_NM FROM TB_BM01M01 WHERE PRDT_CD = A.TRST_PRDT_CD) AS TRST_PRDT_NM
						, A.PRDT_SPEC
						, A.PRDT_LEN
						, A.PRDT_SIZE
						, A.IMP_YN
						, A.REAL_TRST_WT
						, A.REAL_TRST_QTY 
						, A.REAL_TRST_AMT
						, (ABS(A.REAL_TRST_QTY)*NVL(C.PRDT_CNVRSN_WT,1)) AS  MOVE_WT
						, ABS(A.REAL_TRST_QTY) AS  MOVE_QTY 
						, FN_CM05M01_CD_TO_NM(A.IMP_YN) AS IMP_NM
						, C.PRDT_CNVRSN_WT AS PRDT_CNVRSN_WT
						, TO_CHAR(A.CREAT_DTTM, 'YYYY-MM-DD HH24:MI') AS UDT_DTTM
						, C.PRDT_COIL_YN
						FROM TB_AR02M01 A
							INNER JOIN TB_BM01M01 C ON A.TRST_PRDT_CD = C.PRDT_CD AND C.PRDT_STOCK_CD = 'Y'
						WHERE   A.SELPCH_CD  = 'SELPCH1'
							AND A.TYP_CD     = 'SELLTYPE2'
							AND A.PRJCT_CD   IS NOT NULL
							AND A.PRJCT_CD   > 0
							AND A.TUNKEY_MOVE_YN = 'N'
							<if test="coCd != null and !coCd.equals('')">
								AND A.CO_CD = #{coCd}
							</if>
							<if test="whCd != null and !whCd.equals('')">
								AND A.WH_CD = #{whCd}
							 </if>
							 <if test="trstClntCd != null and !trstClntCd.equals('')">
								AND A.TRST_CLNT_CD = #{trstClntCd}
							</if>
						     <if test="prjctCd != null and !prjctCd.equals('')">
								AND A.PRJCT_CD = #{prjctCd}
							</if>
					UNION ALL
					SELECT
						'TYPE2' AS T_TYPE
						,'이동' AS LIST_GB
						, null AS TRST_CERTI_NO
						, B.TRST_NO
						, B.IN_CO_CD AS CO_CD
						, FN_CM05M01_CD_TO_NM(B.IN_CO_CD) AS CO_NM
						, B.IN_WH_CD AS WH_CD
						, FN_CM05M01_CD_TO_NM(B.IN_WH_CD) WH_NM
						, B.MAKR_CD
						, B.OWNER_CD
						, FN_CM05M01_CD_TO_NM(B.OWNER_CD) AS OWNER_NM
						, B.IN_TYP_CD AS TYP_CD
						, FN_CM05M01_CD_TO_NM(B.IN_TYP_CD) AS TYP_NM
						, B.IN_TYP_CD AS SELPCH_CD
						, B.IN_PRJCT_CD AS PRJCT_CD
						, TO_CHAR(TO_DATE(B.TRST_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS TRST_DT
						, B.IN_PRJCT_CD AS PRJCT_CD
						, (SELECT PRJCT_NM FROM TB_SD05M01 WHERE PRJCT_CD = B.IN_PRJCT_CD ) AS PRJCT_NM
						, B.CLNT_CD AS TRST_CLNT_CD
						, (SELECT CLNT_NM FROM TB_BM02M01 WHERE CLNT_CD = B.CLNT_CD) AS TRST_CLNT_NM
						, B.IN_PRDT_CD AS TRST_PRDT_CD
						,(SELECT PRDT_NM FROM TB_BM01M01 WHERE PRDT_CD = B.IN_PRDT_CD) AS TRST_PRDT_NM
						, B.IN_PRDT_SPEC AS PRDT_SPEC
						, B.IN_PRDT_LEN AS PRDT_LEN
						, B.IN_PRDT_SIZE AS PRDT_SIZE
						, B.IMP_YN
						, B.MOVE_WT AS  REAL_TRST_WT
						, B.MOVE_QTY AS REAL_TRST_QTY
						, 0 AS REAL_TRST_AMT
						, B.MOVE_WT AS  MOVE_WT
						, B.MOVE_QTY  AS  MOVE_QTY 
						, FN_CM05M01_CD_TO_NM(B.IMP_YN) AS IMP_NM
						, NVL(C.PRDT_CNVRSN_WT,1) AS PRDT_CNVRSN_WT -- 널이면 1
						, TO_CHAR(B.CREAT_DTTM, 'YYYY-MM-DD HH24:MI') AS UDT_DTTM
						, C.PRDT_COIL_YN
				  FROM TB_SM02M01 B, TB_BM01M01 C, TB_BM02M01 E
				 WHERE B.IN_PRDT_CD = C.PRDT_CD
				   AND B.CLNT_CD    = E.CLNT_CD(+)
				   AND B.MOVE_QTY  != 0
				   AND B.IN_TYP_CD  = 'SELLTYPE2'
				   AND B.IN_PRJCT_CD IS NOT NULL
				   AND B.IN_PRJCT_CD > 0
				   AND B.TUNKEY_MOVE_YN = 'N'
				<if test="coCd != null and !coCd.equals('')">
					AND B.IN_CO_CD = #{coCd}
				</if>
				<if test="whCd != null and !whCd.equals('')">
					AND B.IN_WH_CD = #{whCd}
				 </if>
				 <if test="trstClntCd != null and !trstClntCd.equals('')">
					AND B.IN_WH_CD = #{trstClntCd}
				</if>
			     <if test="prjctCd != null and !prjctCd.equals('')">
					AND B.IN_PRJCT_CD = #{prjctCd}
				</if>
				) T1
				WHERE 1 = 1
				ORDER BY TRST_PRDT_NM DESC
			) D
			WHERE 1 = 1 
		     <if test="prjctNm != null and !prjctNm.equals('')">
				AND D.PRJCT_NM LIKE '%'|| #{prjctNm} ||'%'
			</if>
		    <if test="trstClntNm != null and !trstClntNm.equals('')">
				AND D.TRST_CLNT_NM LIKE '%'|| #{trstClntNm} ||'%'
			</if>
			ORDER BY D.TRST_DT DESC, D.PRJCT_NM DESC
		)
	</select>	
	
	<select id="selectStockTernKeykMovePchList" parameterType="Map" resultType="CamelMap">
		SELECT *
			FROM(
				SELECT
						ROWNUM AS RNUM, D.*
				FROM(		
					SELECT T1.* 
					FROM
					(SELECT 
						'TYPE2' AS T_TYPE
						,'매입' AS LIST_GB
						, A.TRST_CERTI_NO
						, null AS TRST_NO
						, A.CO_CD
						, FN_CM05M01_CD_TO_NM(A.CO_CD) AS CO_NM
						, A.WH_CD
						, FN_CM05M01_CD_TO_NM(A.WH_CD) WH_NM
						, A.MAKR_CD
						, A.OWNER_CD
						, FN_CM05M01_CD_TO_NM(A.OWNER_CD) AS OWNER_NM
						, A.TYP_CD
						, FN_CM05M01_CD_TO_NM(A.TYP_CD) AS TYP_NM
						, A.SELPCH_CD
						, A.PRJCT_CD
						, TO_CHAR(TO_DATE(A.TRST_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS TRST_DT
						, A.PRJCT_CD
						, (SELECT PRJCT_NM FROM TB_SD05M01 WHERE PRJCT_CD = A.PRJCT_CD ) AS PRJCT_NM
						, TO_NUMBER((SELECT CODE_ETC  FROM TB_CM05M01 WHERE CODE_ID = (SELECT CODE_ETC FROM TB_CM05M01 WHERE CODE_ID = A.WH_CD))) AS TRST_CLNT_CD
						, (SELECT CLNT_NM FROM TB_BM02M01 WHERE CLNT_CD = (SELECT CODE_ETC  FROM TB_CM05M01 WHERE CODE_ID = (SELECT CODE_ETC FROM TB_CM05M01 WHERE CODE_ID = A.WH_CD))) AS TRST_CLNT_NM
						, A.TRST_PRDT_CD
						,(SELECT PRDT_NM FROM TB_BM01M01 WHERE PRDT_CD = A.TRST_PRDT_CD) AS TRST_PRDT_NM
						, A.PRDT_SPEC
						, A.PRDT_LEN
						, A.PRDT_SIZE
						, A.IMP_YN
						, A.REAL_TRST_WT
						, A.REAL_TRST_QTY 
						, A.REAL_TRST_AMT
						, (ABS(A.REAL_TRST_QTY)*NVL(C.PRDT_CNVRSN_WT,1)) AS  MOVE_WT
						, ABS(A.REAL_TRST_QTY) AS  MOVE_QTY 
						, FN_CM05M01_CD_TO_NM(A.IMP_YN) AS IMP_NM
						, C.PRDT_CNVRSN_WT AS PRDT_CNVRSN_WT
						, TO_CHAR(A.CREAT_DTTM, 'YYYY-MM-DD HH24:MI') AS UDT_DTTM
						, C.PRDT_COIL_YN
						FROM TB_AR02M01 A
							INNER JOIN TB_BM01M01 C ON A.TRST_PRDT_CD = C.PRDT_CD AND C.PRDT_STOCK_CD = 'Y'
						WHERE   A.SELPCH_CD  = 'SELPCH1'
							AND A.TYP_CD     = 'SELLTYPE2'
							AND A.PRJCT_CD   IS NOT NULL
							AND A.PRJCT_CD   > 0
							AND A.TUNKEY_MOVE_YN = 'N'
							<if test="coCd != null and !coCd.equals('')">
								AND A.CO_CD = #{coCd}
							</if>
							<if test="whCd != null and !whCd.equals('')">
								AND A.WH_CD = #{whCd}
							 </if>
							 <if test="trstClntCd != null and !trstClntCd.equals('')">
								AND A.TRST_CLNT_CD = #{trstClntCd}
							</if>
						     <if test="prjctCd != null and !prjctCd.equals('')">
								AND A.PRJCT_CD = #{prjctCd}
							</if>
					UNION ALL
					SELECT
						'TYPE2' AS T_TYPE
						,'이동' AS LIST_GB
						, null AS TRST_CERTI_NO
						, B.TRST_NO
						, B.IN_CO_CD AS CO_CD
						, FN_CM05M01_CD_TO_NM(B.IN_CO_CD) AS CO_NM
						, B.IN_WH_CD AS WH_CD
						, FN_CM05M01_CD_TO_NM(B.IN_WH_CD) WH_NM
						, B.MAKR_CD
						, B.OWNER_CD
						, FN_CM05M01_CD_TO_NM(B.OWNER_CD) AS OWNER_NM
						, B.IN_TYP_CD AS TYP_CD
						, FN_CM05M01_CD_TO_NM(B.IN_TYP_CD) AS TYP_NM
						, B.IN_TYP_CD AS SELPCH_CD
						, B.IN_PRJCT_CD AS PRJCT_CD
						, TO_CHAR(TO_DATE(B.TRST_DT, 'YYYYMMDD'), 'YYYY-MM-DD') AS TRST_DT
						, B.IN_PRJCT_CD AS PRJCT_CD
						, (SELECT PRJCT_NM FROM TB_SD05M01 WHERE PRJCT_CD = B.IN_PRJCT_CD ) AS PRJCT_NM
						, B.CLNT_CD AS TRST_CLNT_CD
						, (SELECT CLNT_NM FROM TB_BM02M01 WHERE CLNT_CD = B.CLNT_CD) AS TRST_CLNT_NM
						, B.IN_PRDT_CD AS TRST_PRDT_CD
						,(SELECT PRDT_NM FROM TB_BM01M01 WHERE PRDT_CD = B.IN_PRDT_CD) AS TRST_PRDT_NM
						, B.IN_PRDT_SPEC AS PRDT_SPEC
						, B.IN_PRDT_LEN AS PRDT_LEN
						, B.IN_PRDT_SIZE AS PRDT_SIZE
						, B.IMP_YN
						, B.MOVE_WT AS  REAL_TRST_WT
						, B.MOVE_QTY AS REAL_TRST_QTY
						, 0 AS REAL_TRST_AMT
						, B.MOVE_WT AS  MOVE_WT
						, B.MOVE_QTY  AS  MOVE_QTY 
						, FN_CM05M01_CD_TO_NM(B.IMP_YN) AS IMP_NM
						, NVL(C.PRDT_CNVRSN_WT,1) AS PRDT_CNVRSN_WT -- 널이면 1
						, TO_CHAR(B.CREAT_DTTM, 'YYYY-MM-DD HH24:MI') AS UDT_DTTM
						, C.PRDT_COIL_YN
				  FROM TB_SM02M01 B, TB_BM01M01 C, TB_BM02M01 E
				 WHERE B.IN_PRDT_CD = C.PRDT_CD
				   AND B.CLNT_CD    = E.CLNT_CD(+)
				   AND B.MOVE_QTY  != 0
				   AND B.IN_TYP_CD  = 'SELLTYPE2'
				   AND B.IN_PRJCT_CD IS NOT NULL
				   AND B.IN_PRJCT_CD > 0
				   AND B.TUNKEY_MOVE_YN = 'N'
				<if test="coCd != null and !coCd.equals('')">
					AND B.IN_CO_CD = #{coCd}
				</if>
				<if test="whCd != null and !whCd.equals('')">
					AND B.IN_WH_CD = #{whCd}
				 </if>
				 <if test="trstClntCd != null and !trstClntCd.equals('')">
					AND B.IN_WH_CD = #{trstClntCd}
				</if>
			     <if test="prjctCd != null and !prjctCd.equals('')">
					AND B.IN_PRJCT_CD = #{prjctCd}
				</if>
				) T1
				WHERE 1 = 1
				ORDER BY TRST_PRDT_NM DESC
			) D
			WHERE 1 = 1 
		     <if test="prjctNm != null and !prjctNm.equals('')">
				AND D.PRJCT_NM LIKE '%'|| #{prjctNm} ||'%'
			</if>
		    <if test="trstClntNm != null and !trstClntNm.equals('')">
				AND D.TRST_CLNT_NM LIKE '%'|| #{trstClntNm} ||'%'
			</if>
			ORDER BY D.TRST_DT DESC, D.PRJCT_NM DESC
		)
		WHERE
			RNUM BETWEEN #{firstIndex} AND #{lastIndex}
	</select>
	
	<select id="sm02selectTernKeyStock" parameterType="Map" resultType="CamelMap">
		SELECT *
		FROM TB_SM01M01
		WHERE TYP_CD = 'SELLTYPE2'
		  AND CO_CD = #{coCd}
		  AND WH_CD = #{whCd}
		  AND PRJCT_CD = #{prjctCd}
		  AND MAKR_CD = #{makrCd}
		  AND OWNER_CD = #{ownerCd}
		  AND PRDT_CD = #{trstPrdtCd}
	</select>	
	
	<select id="selectUprDtlCount" parameterType="Map" resultType="int">
		SELECT
			COUNT(*)
		FROM TB_SM01M01 A
		  INNER JOIN TB_BM01M01 C ON A.PRDT_CD = C.PRDT_CD
		  INNER JOIN TB_BM02M01 E ON  A.CLNT_CD = E.CLNT_CD
		  LEFT OUTER JOIN TB_SD05M01 SD05 ON SD05.PRJCT_CD = A.PRJCT_CD
		WHERE 1=1 
		<if test="coCd != null and !coCd.equals('')">
			AND A.CO_CD = #{coCd}
		</if>
		<if test="whCd != null and !whCd.equals('')">
		 	AND A.WH_CD = #{whCd}
		</if>
		<if test="clntNm != null and !clntNm.equals('')">
			AND E.CLNT_NM LIKE '%' || #{clntNm} || '%'
		</if>
		<if test="ownerCd != null and !ownerCd.equals('')">
			AND OWNER_CD = #{ownerCd}
		</if>
		<if test="typCd != null and !typCd.equals('')">
			AND TYP_CD = #{typCd}
		</if>
<!-- 		<if test="makrCd != null and !makrCd.equals('')"> -->
<!-- 			AND MAKR_CD = #{makrCd} -->
<!-- 		</if> -->
		<if test="impYn != null and !impYn.equals('')">
			AND IMP_YN = #{impYn}
		</if>
		<if test="prdtNm != null and !prdtNm.equals('')">
				AND C.PRDT_NM LIKE '%' || #{prdtNm} || '%'
		</if>
		<if test="prdtCoilYn != null and !prdtCoilYn.equals('')">
				AND C.PRDT_COIL_YN LIKE  #{prdtCoilYn}
		</if>
	     <if test="prjctNm != null and !prjctNm.equals('')">
				AND SD05.PRJCT_NM LIKE '%' || #{prjctNm} || '%'
		</if>
	</select>
	
	
	
	<select id="selectStockMoveStatMngmDtlList" parameterType="Map" resultType="CamelMap">
		SELECT *
		FROM (
			SELECT
				ROWNUM AS RNUM, D.*
			FROM(
				SELECT 	  
						  A.STOK_SEQ
						, A.CO_CD
						, FN_CM05M01_CD_TO_NM(A.CO_CD) AS CO_NM
						, A.WH_CD
						, FN_CM05M01_CD_TO_NM(A.WH_CD) AS WH_NM
						, A.OWNER_CD
						, FN_CM05M01_CD_TO_NM(A.OWNER_CD) AS OWNER_NM
						, A.TYP_CD
						, FN_CM05M01_CD_TO_NM(A.TYP_CD) AS TYP_NM
						, A.MAKR_CD
						, FN_CM05M01_CD_TO_NM(A.MAKR_CD) AS MAKR_NM
						, A.PRJCT_CD
						, (SELECT PRJCT_NM FROM TB_SD05M01 WHERE PRJCT_CD = A.PRJCT_CD ) AS PRJCT_NM
						, A.PRDT_CD
				     	, C.PRDT_NM
						, A.TYP_CD
						, FN_CM05M01_CD_TO_NM(A.TYP_CD) AS TYP_NM
				     	, A.CLNT_CD
						, A.TYP_CD
						, FN_CM05M01_CD_TO_NM(A.TYP_CD) AS TYP_NM
				        , A.PRDT_SPEC
				        , A.PRDT_SIZE
				        , A.PRDT_LEN
				     	, E.CLNT_NM
					    , A.IMP_YN
						, FN_CM05M01_CD_TO_NM(A.IMP_YN) AS IMP_NM
						, NVL(A.STOCK_QTY, 0) AS STOCK_QTY
						, NVL(A.STOCK_WT, 0) AS STOCK_WT
						, A.STOCK_UPR
						, A.STOCK_AMT
						, A.STD_UPR
						, A.PCHS_UPR
						, A.SELL_UPR
						, A.SELL_LAST_DT
						, A.PROPRT_STOCK_QTY
						, A.ODR_QTY
						, A.STOCK_CHG_CD
						, C.PRDT_COIL_YN
						, C.PRDT_CNVRSN_WT
				FROM TB_SM01M01 A
			    LEFT JOIN TB_BM01M01 C ON A.PRDT_CD = C.PRDT_CD
			    LEFT JOIN TB_BM02M01 E ON A.CLNT_CD = E.CLNT_CD
				<where> 
					<if test="coCd != null and !coCd.equals('')">
						AND CO_CD = #{coCd}
					</if>
					<if test="whCd != null and !whCd.equals('')">
					 	AND WH_CD = #{whCd}
					</if>
					<if test="clntNm != null and !clntNm.equals('')">
						AND E.CLNT_NM LIKE '%' || #{clntNm} || '%'
					</if>
					<if test="ownerCd != null and !ownerCd.equals('')">
						AND OWNER_CD = #{ownerCd}
					</if>
					<if test="typCd != null and !typCd.equals('')">
						AND TYP_CD = #{typCd}
					</if>
	<!-- 				<if test="makrCd != null and !makrCd.equals('')"> -->
	<!-- 					AND MAKR_CD = #{makrCd} -->
	<!-- 				</if> -->
					<if test="impYn != null and !impYn.equals('')">
						AND IMP_YN = #{impYn}
					</if>
					<if test="prdtNm != null and !prdtNm.equals('')">
							AND C.PRDT_NM LIKE '%' || #{prdtNm} || '%'
					</if>
					<if test="prdtCoilYn != null and !prdtCoilYn.equals('')">
							AND C.PRDT_COIL_YN LIKE  #{prdtCoilYn}
					</if>
				     <if test="prjctCd != null and !prjctCd.equals('')">
							AND A.PRJCT_CD = #{prjctCd}
					</if>
				</where>
				ORDER BY C.PRDT_NM,A.PRJCT_CD
			)D
			WHERE  1= 1 
			     <if test="prjctNm != null and !prjctNm.equals('')">
						AND D.PRJCT_NM LIKE '%' || #{prjctNm} || '%'
				</if>
		)
		WHERE
			RNUM BETWEEN #{firstIndex} AND #{lastIndex}
	</select>
	
	<update id="sm01UpdateStockMove" parameterType="Map">
		UPDATE TB_SM01M01 SET
			STOCK_QTY = #{stockQty}-#{moveQty}
		   ,STOCK_WT  = #{stockWt}-#{moveWt}
		WHERE STOK_SEQ = #{stokSeq}
	</update>
	
	<update id="sm01UpdateInsertStockMove" parameterType="Map">
		MERGE INTO TB_SM01M01 A
		USING (
		   SELECT
			   STOK_SEQ,
			   CO_CD,
			   #{sWhCd} AS WH_CD,
			   PRDT_CD,
			   PRDT_SIZE,
			   PRDT_SPEC,
<!-- 			   길이는 관리대상이 아님 -->
<!-- 			   #{sPrdtLen} PRDT_LEN, -->
			   PRDT_LEN,
			   OWNER_CD,
			   CLNT_CD,
			   #{sellType} AS TYP_CD,
			   MAKR_CD,
			   #{sPrjctCd} PRJCT_CD,
			   IMP_YN,
			   #{moveQty} AS STOCK_QTY,
			   #{moveWt}  AS STOCK_Wt,
			   STOCK_UPR,
			   STOCK_AMT,
			   STD_UPR,
			   PCHS_UPR,
			   SELL_UPR,
			   PROPRT_STOCK_QTY,
			   'STOCKCHG06',
			   #{userId},
			   #{pgmId}, 
			   SYSDATE 
		   FROM TB_SM01M01
		   WHERE  STOK_SEQ = #{stokSeq}) S 
		ON (
			  A.CO_CD     = S.CO_CD
		  AND A.WH_CD     = S.WH_CD
		  AND A.CLNT_CD   = S.CLNT_CD
		  AND A.TYP_CD    = S.TYP_CD
		  AND A.MAKR_CD   = S.MAKR_CD
		  AND A.OWNER_CD  = S.OWNER_CD
		  AND A.PRDT_CD   = S.PRDT_CD
		  AND A.IMP_YN    = S.IMP_YN
		  AND A.PRJCT_CD  = S.PRJCT_CD
		  AND NVL(A.PRDT_SIZE,0) = NVL(S.PRDT_SIZE,0)
		  AND NVL(A.PRDT_SPEC,0) = NVL(S.PRDT_SPEC,0)
		  AND NVL(A.PRDT_LEN,0)  = NVL(S.PRDT_LEN,0)
		)
		WHEN MATCHED THEN 
			UPDATE SET   ( STOCK_QTY )= ( SELECT STOCK_QTY + #{moveQty} AS STOCK_QTY FROM TB_SM01M01 
			 	                            WHERE STOK_SEQ   = A.STOK_SEQ )
			           ,(STOCK_WT ) = ( SELECT STOCK_WT + #{moveWt} AS STOCK_Wt FROM TB_SM01M01 
			 	                            WHERE STOK_SEQ   = A.STOK_SEQ )
		WHEN NOT MATCHED THEN 
		INSERT
		(
		   STOK_SEQ,
		   CO_CD,
		   WH_CD,
		   PRDT_CD,
		   PRDT_SIZE,
		   PRDT_SPEC,
		   PRDT_LEN,
		   OWNER_CD,
		   CLNT_CD,
		   TYP_CD,
		   MAKR_CD,
		   PRJCT_CD,
		   IMP_YN,
		   STOCK_QTY,
		   STOCK_WT,
		   STOCK_UPR,
		   STOCK_AMT,
		   STD_UPR,
		   PCHS_UPR,
		   SELL_UPR,
		   PROPRT_STOCK_QTY,
		   STOCK_CHG_CD,
		   CREAT_ID,
		   CREAT_PGM, 
		   UDT_DTTM
		)VALUES(
		   TB_SM01M01_SQ01.NEXTVAL, 
		   S.CO_CD,
		   S.WH_CD,
		   S.PRDT_CD,
		   S.PRDT_SIZE,
		   S.PRDT_SPEC,
		   S.PRDT_LEN,
		   S.OWNER_CD,
		   S.CLNT_CD,
		   S.TYP_CD,
		   S.MAKR_CD,
		   S.PRJCT_CD,
		   S.IMP_YN,
		   S.STOCK_QTY,
		   S.STOCK_WT,
		   S.STOCK_UPR,
		   S.STOCK_AMT,
		   S.STD_UPR,
		   S.PCHS_UPR,
		   S.SELL_UPR,
		   S.PROPRT_STOCK_QTY,
		   'STOCKCHG06',
		   #{userId},
		   #{pgmId}, 
		   SYSDATE)
	</update>
	
	<insert id="sm02InsertStockMove" parameterType="Map">
		INSERT INTO TB_SM02M01
		(
			TRST_NO, 
			OUT_CO_CD,	
			OUT_WH_CD, 
			OWNER_CD,
			CLNT_CD, 
			TYP_CD, 
			MAKR_CD, 
			PRJCT_CD, 
			PRDT_CD, 
			PRDT_SIZE,
		    PRDT_SPEC,
		    PRDT_LEN,
			IMP_YN, 
			IN_CO_CD, 
			IN_TYP_CD, 
			IN_WH_CD, 
			IN_PRJCT_CD,
			IN_PRDT_CD,
			IN_PRDT_SPEC,
			IN_PRDT_SIZE,
			IN_PRDT_LEN,
			STOCK_UPR, 
			STD_UPR,
			PCHS_UPR, 
			SELL_UPR,	
			MOVE_QTY,
			MOVE_WT,
			RMK,	
			CREAT_ID, 
			CREAT_PGM, 
			CREAT_DTTM, 
			TRST_DT
		 	<if test="transSeq != null and !transSeq.equals('')">
			,TRANS_AMT
			,TRANS_SEQ
			</if>
			, ERR_COREC_YN
		)
	 	VALUES
	 	(
			TB_SM02M01_SQ01.NEXTVAL, 
			#{coCd}, 
			#{whCd}, 
			#{ownerCd}, 
			NVL(#{clntCd}, 0),
			#{typCd}, 
			#{makrCd},
			#{prjctCd}, 
			#{prdtCd}, 
			#{prdtSize},
			#{prdtSpec},
			#{prdtLen},
			#{impYn},
			#{sCoCd}, 
			#{sellType}, 
			#{sWhCd},
			NVL(#{sPrjctCd}, #{prjctCd}),
            NVL(#{sPrdtCd} , #{prdtCd}),
		    NVL(#{sPrdtSpec},#{prdtSpec}),
		    NVL(#{sPrdtSize},#{prdtSize}),
            NVL(#{sPrdtLen}, #{prdtLen}),
			#{stockUpr},
			#{stdUpr}, 
			#{pchsUpr}, 
			#{sellUpr},
			#{moveQty},
			#{moveWt},
			#{sRmk},
			#{userId}, 
			#{pgmId}, 
			sysdate, 
			TO_CHAR(TO_DATE(#{sTransDt}, 'YYYY-MM-DD'),'YYYYMMDD')
			<if test="transSeq != null and !transSeq.equals('')">
			,#{transAmt}
			,#{transSeq}
			</if>			
			,#{errCorecYn}
	 	)
	</insert>
	
	<update id="sm01UpdateInsertBarterStockMove" parameterType="Map">
		MERGE INTO TB_SM01M01 A
		USING (
		   SELECT 
			   STOK_SEQ,
			   CO_CD,
			   #{sWhCd}     AS WH_CD,
			   #{sPrdtCd}   AS PRDT_CD,
			   #{sPrdtSize} AS PRDT_SIZE,
			   #{sPrdtSpec} AS PRDT_SPEC,
<!-- 			   #{sPrdtLen}  AS PRDT_LEN, -->
			   PRDT_LEN,
			   OWNER_CD,
			   CLNT_CD,
			   #{sellType} AS TYP_CD,
			   MAKR_CD,
			   #{sPrjctCd} AS PRJCT_CD,
			   IMP_YN,
			   #{moveQty} AS STOCK_QTY,
			   #{moveWt} AS STOCK_Wt,
			   STOCK_UPR,
			   STOCK_AMT,
			   STD_UPR,
			   PCHS_UPR,
			   SELL_UPR,
			   PROPRT_STOCK_QTY,
			   'STOCKCHG06',
			   #{userId},
			   #{pgmId}, 
			   SYSDATE
		   FROM TB_SM01M01
		   WHERE STOK_SEQ = #{stokSeq})S 
		ON (
			  A.CO_CD     = S.CO_CD
		  AND A.WH_CD     = S.WH_CD
		  AND A.CLNT_CD   = S.CLNT_CD
		  AND A.TYP_CD    = S.TYP_CD
		  AND A.MAKR_CD   = S.MAKR_CD
		  AND A.OWNER_CD  = S.OWNER_CD
		  AND A.PRDT_CD   = S.PRDT_CD
		  AND A.IMP_YN    = S.IMP_YN
		  AND A.PRJCT_CD  = S.PRJCT_CD
		  AND NVL(A.PRDT_SIZE,0) = NVL(S.PRDT_SIZE,0)
		  AND NVL(A.PRDT_SPEC,0) = NVL(S.PRDT_SPEC,0)
		  AND NVL(A.PRDT_LEN,0)  = NVL(S.PRDT_LEN,0)
		)
		WHEN MATCHED THEN 
			UPDATE SET   ( STOCK_QTY ) = ( SELECT STOCK_QTY + #{moveQty} AS STOCK_QTY FROM TB_SM01M01 
			 	                            WHERE STOK_SEQ   = A.STOK_SEQ )
			 	        ,( STOCK_WT ) = ( SELECT STOCK_WT + #{moveWt} AS STOCK_WT FROM TB_SM01M01 
			 	                            WHERE STOK_SEQ   = A.STOK_SEQ )                   
		WHEN NOT MATCHED THEN 
		INSERT
		(
		   STOK_SEQ,
		   CO_CD,
		   WH_CD,
		   PRDT_CD,
		   PRDT_SIZE,
		   PRDT_SPEC,
		   PRDT_LEN,
		   OWNER_CD,
		   CLNT_CD,
		   TYP_CD,
		   MAKR_CD,
		   PRJCT_CD,
		   IMP_YN,
		   STOCK_QTY,
		   STOCK_WT,
		   STOCK_UPR,
		   STOCK_AMT,
		   STD_UPR,
		   PCHS_UPR,
		   SELL_UPR,
		   PROPRT_STOCK_QTY,
		   STOCK_CHG_CD,
		   CREAT_ID,
		   CREAT_PGM, 
		   UDT_DTTM
		)VALUES(
		   TB_SM01M01_SQ01.NEXTVAL,
		   S.CO_CD,
		   S.WH_CD,
		   S.PRDT_CD,
		   S.PRDT_SIZE,
		   S.PRDT_SPEC,
		   S.PRDT_LEN,
		   S.OWNER_CD,
		   S.CLNT_CD,
		   S.TYP_CD,
		   S.MAKR_CD,
		   S.PRJCT_CD,
		   S.IMP_YN,
		   S.STOCK_QTY,
		   S.STOCK_WT,
		   S.STOCK_UPR,
		   S.STOCK_AMT,
		   S.STD_UPR,
		   S.PCHS_UPR,
		   S.SELL_UPR,
		   S.PROPRT_STOCK_QTY,
		   'STOCKCHG06',
		   #{userId},
		   #{pgmId}, 
		   SYSDATE)
	</update>
	
	<insert id="sm02InsertBarterStockMove" parameterType="Map">
		INSERT INTO TB_SM02M01
		(
			TRST_NO, 
			OUT_CO_CD,	
			OUT_WH_CD, 
			OWNER_CD,
			CLNT_CD, 
			TYP_CD, 
			MAKR_CD, 
			PRJCT_CD, 
			PRDT_CD,
			PRDT_SIZE,
		    PRDT_SPEC,
		    PRDT_LEN, 
			IMP_YN, 
			IN_CO_CD, 
			IN_TYP_CD,
			IN_WH_CD, 
			IN_PRJCT_CD,
			IN_PRDT_CD,
			IN_PRDT_SPEC,
			IN_PRDT_SIZE,
			IN_PRDT_LEN,
			STOCK_UPR, 
			STD_UPR,
			PCHS_UPR, 
			SELL_UPR,	
			MOVE_QTY, 
			MOVE_WT, 
			RMK,	
			CREAT_ID, 
			CREAT_PGM, 
			CREAT_DTTM, 
			TRST_DT,
			<if test="transSeq != null and !transSeq.equals('')">
		 		TRANS_AMT,
				TRANS_SEQ,
			</if>
			ERR_COREC_YN
		)
	 	VALUES
	 	(
			TB_SM02M01_SQ01.NEXTVAL, 
			#{coCd}, 
			#{whCd}, 
			#{ownerCd}, 
			#{clntCd},
			#{typCd}, 
			#{makrCd},
			#{prjctCd}, 
			#{prdtCd}, 
			#{prdtSize},
			#{prdtSpec},
			#{prdtLen},
			#{impYn},
			#{sCoCd}, 
			NVL(#{sellType}, #{typCd}),
			NVL(#{sWhCd},    #{whCd}),
			NVL(#{sPrjctCd}, #{prjctCd}),
            NVL(#{sPrdtCd} , #{prdtCd}),
            NVL(#{sPrdtSpec},#{prdtSpec}),	
            NVL(#{sPrdtSize},#{prdtSize}),	
            NVL(#{sPrdtLen}, #{prdtLen}),	
			#{stockUpr},
			#{stdUpr}, 
			#{pchsUpr}, 
			#{sellUpr},
			#{moveQty},
			#{moveWt},
			#{sRmk},
			#{userId}, 
			#{pgmId}, 
			SYSDATE, 
			TO_CHAR(TO_DATE(#{sTransDt}, 'YYYY-MM-DD'),'YYYYMMDD'),
			<if test="transSeq != null and !transSeq.equals('')">
				#{transAmt, jdbcType=VARCHAR},
				#{transSeq, jdbcType=VARCHAR},
			</if>
			#{errCorecYn}
	 	)
	</insert>
	
		<insert id="sm03insertStockMst" parameterType="Map">
		INSERT INTO TB_SM01M01
		(
		   STOK_SEQ,
		   CO_CD,
		   WH_CD,
		   PRDT_CD,
		   PRDT_SIZE,
		   PRDT_SPEC,
		   PRDT_LEN,
		   OWNER_CD,
		   CLNT_CD,
		   TYP_CD,
		   MAKR_CD,
		   PRJCT_CD,
		   IMP_YN,
		   STOCK_QTY,
		   STOCK_WT,
		   STOCK_UPR,
		   STOCK_AMT,
		   STD_UPR,
		   PCHS_UPR,
		   SELL_UPR,
		   PROPRT_STOCK_QTY,
		   STOCK_CHG_CD,
		   CREAT_ID,
		   CREAT_PGM, 
		   UDT_DTTM
		)VALUES(
		   TB_SM01M01_SQ01.NEXTVAL, 
		   #{coCd},
		   #{whCd},
		   #{trstPrdtCd},
		   #{prdtSize},
		   #{prdtSpec},
<!-- 		   길이는 관리 대상이 아님 -->
<!-- 		   #{prdtLen}, -->
			8,
		   #{ownerCd},
		   #{trstClntCd},
		   #{typCd}, 
		   #{makrCd},
		   #{prjctCd},
		   #{impYn},
		   #{moveQty},
		   #{moveWt},
		   #{stockUpr},
		   #{stockAmt},
		   #{stdUpr},
		   #{pchsUpr},
		   #{realTrstAmt},
		   #{proprtStockQty},
		   'STOCKCHG06',
		   #{userId},
		   #{pgmId}, 
		   SYSDATE)
	</insert>
	
	<insert id="sm03InsertStockMove" parameterType="Map">
		INSERT INTO TB_SM02M01
		(
			TRST_NO, 
			OUT_CO_CD,	
			OUT_WH_CD, 
			OWNER_CD,
			CLNT_CD, 
			TYP_CD, 
			MAKR_CD, 
			PRJCT_CD, 
			PRDT_CD, 
			PRDT_SIZE,
		    PRDT_SPEC,
		    PRDT_LEN,
			IMP_YN, 
			IN_CO_CD, 
			IN_TYP_CD, 
			IN_WH_CD, 
			IN_PRJCT_CD,
			IN_PRDT_CD,
			IN_PRDT_SPEC,
			IN_PRDT_SIZE,
			IN_PRDT_LEN,
			STOCK_UPR, 
			STD_UPR,
			PCHS_UPR, 
			SELL_UPR,	
			MOVE_QTY,
			MOVE_WT,
			RMK,	
			CREAT_ID, 
			CREAT_PGM, 
			CREAT_DTTM, 
			TRST_DT,
			ERR_COREC_YN
		)
	 	VALUES
	 	(
			TB_SM02M01_SQ01.NEXTVAL, 
			#{coCd}, 
			#{whCd}, 
			#{ownerCd}, 
			#{trstClntCd},
			#{typCd},
			#{makrCd},
			#{prjctCd}, 
			#{trstPrdtCd}, 
			#{prdtSize},
			#{prdtSpec},
			#{prdtLen},
			#{impYn},
			#{coCd}, 
			#{sellType}, 
			#{whCd},
			#{prjctCd},
            #{trstPrdtCd}, 
			#{prdtSpec},
		    #{prdtSize},
			#{prdtLen},
			#{stockUpr},
			#{stdUpr}, 
			#{pchsUpr}, 
			#{sellUpr},
			#{moveQty},
			#{moveWt},
			#{sRmk},
			#{userId}, 
			#{pgmId}, 
			sysdate, 
			TO_CHAR(TO_DATE(#{sTransDt}, 'YYYY-MM-DD'),'YYYYMMDD'),
			#{errCorecYn}
	 	)
	</insert>
		
	<update id="sm02UpdateTernKeyStockMst" parameterType="Map">
		MERGE INTO TB_SM01M01 A
		USING (
		   SELECT 
			   STOK_SEQ,
			   CO_CD,
			   #{sWhCd}     AS WH_CD,
			   #{sPrdtCd}   AS PRDT_CD,
			   #{sPrdtSize} AS PRDT_SIZE,
			   #{sPrdtSpec} AS PRDT_SPEC,
<!-- 			   #{sPrdtLen}  AS PRDT_LEN, -->
		  	   PRDT_LEN,
			   OWNER_CD,
			   CLNT_CD,
			   #{sellType} AS TYP_CD,
			   MAKR_CD,
			   #{sPrjctCd} AS PRJCT_CD,
			   IMP_YN,
			   #{moveQty} AS STOCK_QTY,
			   #{moveWt} AS STOCK_Wt,
			   STOCK_UPR,
			   STOCK_AMT,
			   STD_UPR,
			   PCHS_UPR,
			   SELL_UPR,
			   PROPRT_STOCK_QTY,
			   'STOCKCHG06',
			   #{userId},
			   #{pgmId}, 
			   SYSDATE
		   FROM TB_SM01M01
		   WHERE STOK_SEQ = #{stokSeq})S 
		ON (
			  A.CO_CD     = S.CO_CD
		  AND A.WH_CD     = S.WH_CD
		  AND A.CLNT_CD   = S.CLNT_CD
		  AND A.TYP_CD    = S.TYP_CD
		  AND A.MAKR_CD   = S.MAKR_CD
		  AND A.OWNER_CD  = S.OWNER_CD
		  AND A.PRDT_CD   = S.PRDT_CD
		  AND A.IMP_YN    = S.IMP_YN
		  AND A.PRJCT_CD  = S.PRJCT_CD
		  AND NVL(A.PRDT_SIZE,0) = NVL(S.PRDT_SIZE,0)
		  AND NVL(A.PRDT_SPEC,0) = NVL(S.PRDT_SPEC,0)
		  AND NVL(A.PRDT_LEN,0)  = NVL(S.PRDT_LEN,0)
		)
		WHEN MATCHED THEN 
			UPDATE SET   ( STOCK_QTY ) = ( SELECT STOCK_QTY + #{moveQty} AS STOCK_QTY FROM TB_SM01M01 
			 	                            WHERE STOK_SEQ   = A.STOK_SEQ )
			 	        ,( STOCK_WT ) = ( SELECT STOCK_WT + #{moveWt} AS STOCK_WT FROM TB_SM01M01 
			 	                            WHERE STOK_SEQ   = A.STOK_SEQ )                   
		WHEN NOT MATCHED THEN 
		INSERT
		(
		   STOK_SEQ,
		   CO_CD,
		   WH_CD,
		   PRDT_CD,
		   PRDT_SIZE,
		   PRDT_SPEC,
		   PRDT_LEN,
		   OWNER_CD,
		   CLNT_CD,
		   TYP_CD,
		   MAKR_CD,
		   PRJCT_CD,
		   IMP_YN,
		   STOCK_QTY,
		   STOCK_WT,
		   STOCK_UPR,
		   STOCK_AMT,
		   STD_UPR,
		   PCHS_UPR,
		   SELL_UPR,
		   PROPRT_STOCK_QTY,
		   STOCK_CHG_CD,
		   CREAT_ID,
		   CREAT_PGM, 
		   UDT_DTTM
		)VALUES(
		   TB_SM01M01_SQ01.NEXTVAL,
		   S.CO_CD,
		   S.WH_CD,
		   S.PRDT_CD,
		   S.PRDT_SIZE,
		   S.PRDT_SPEC,
		   S.PRDT_LEN,
		   S.OWNER_CD,
		   S.CLNT_CD,
		   S.TYP_CD,
		   S.MAKR_CD,
		   S.PRJCT_CD,
		   S.IMP_YN,
		   S.STOCK_QTY,
		   S.STOCK_WT,
		   S.STOCK_UPR,
		   S.STOCK_AMT,
		   S.STD_UPR,
		   S.PCHS_UPR,
		   S.SELL_UPR,
		   S.PROPRT_STOCK_QTY,
		   'STOCKCHG06',
		   #{userId},
		   #{pgmId}, 
		   SYSDATE)
	</update>
	
	<select id="checkVaildStockByDetail" parameterType="Map" resultType="int">
		SELECT COUNT(*)
		FROM TB_SM01M01
		   WHERE TYP_CD   = #{typCd}
			AND CO_CD     = #{sCoCd}
			AND WH_CD     = #{sWhCd}
			AND OWNER_CD  = #{ownerCd}
			AND CLNT_CD   = #{trstClntCd}
			AND PRJCT_CD   = #{sPrjctCd}
			AND PRDT_CD  = #{trstPrdtCd}
			AND PRDT_SIZE = #{prdtSize}
			AND PRDT_SPEC = #{prdtSpec}
<!-- 			AND PRDT_LEN  = #{prdtLen} -->
			AND IMP_YN    = #{impYn}
	</select>
	
	<update id="sm03UpdateTernKeyYN" parameterType="Map">
		UPDATE TB_AR02M01 
		 SET TUNKEY_MOVE_YN = 'Y'
 		WHERE CO_CD         = #{coCd}
 		AND   TRST_CERTI_NO = #{trstCertiNo}
	</update>
	
	<update id="updateTernKeyYN" parameterType="Map">
		UPDATE TB_SM02M01 
		   SET TUNKEY_MOVE_YN = 'Y'
 		 WHERE TRST_NO = #{trstNo}
	</update>
	
	<update id="updateStockMoveRmk" parameterType="Map">
		UPDATE TB_SM02M01 
		   SET RMK = #{rmk}
 		 WHERE TRST_NO = #{trstNo}
	</update>
	
	<update id="updateStockMoveCaryng" parameterType="Map">
		UPDATE TB_SM02M01
		  SET TRANS_AMT = #{transAmt}
		WHERE TRANS_SEQ = #{transSeq}
	</update>
	
	<update id="updateTrans" parameterType="Map">
		UPDATE 
			TB_SM02M01
		SET
			TRANS_AMT      = 0, 
			TRANS_SEQ      = '',
			UDT_ID       = #{userId},
			UDT_PGM      = #{pgmId},
			UDT_DTTM	 = SYSDATE
		WHERE 
			TRANS_SEQ = #{transSeq}
	</update>
	
	<delete id="deleteStockHistory" parameterType="Map">
		DELETE 
			TB_SM02M01
				WHERE
					TRST_NO = #{trstNo}
	</delete>
	
	
</mapper>