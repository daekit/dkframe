<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dksys.biz.user.sm.sm02.mapper.SM02Mapper">

	<select id= "selectCmnCodeList" resultType="CamelMap">
		SELECT CODE_ID, CODE_NM, CODE_KIND, CODE_DESC
		FROM TB_CM05M01 
		WHERE
		CODE_KIND IN ( #{wh})
	</select>
	
	<select id= "selectDtlCmnCodeList" resultType="CamelMap">
		SELECT CODE_ID, CODE_NM, CODE_KIND, CODE_DESC
		FROM TB_CM05M01 
		WHERE
		CODE_KIND IN ( #{wh}, #{co}, #{makr}, #{owner}, #{selltype}, #{prdtimp} )
	</select>
	
	<select id= "selectClntSearchList" resultType="CamelMap">
		SELECT CLNT_CD, CLNT_NM FROM TB_BM02M01
		<if test="clntCd != null and !clntCd.equals('') or clntNm != null and !clntNm.equals('')">
			WHERE CLNT_CD LIKE '%${clntCd}%'
			  AND CLNT_NM LIKE '%${clntNm}%'
		</if>
	</select>

	<select id= "selectPrdtSearchList" resultType="CamelMap">
		SELECT PRDT_CD, PRDT_NM FROM TB_BM01M01
		<if test="prdtCd != null and !prdtCd.equals('') or prdtNm != null and !prdtNm.equals('')">
			WHERE PRDT_CD LIKE '%${prdtCd}%'
			  AND PRDT_NM LIKE '%${prdtNm}%'
		</if>
	</select>
	
	<select id="selectUprCount" parameterType="Map" resultType="int">
		SELECT
			COUNT(*)
		FROM TB_SM02M01 
		WHERE 1=1 
		<if test="coCd != null and !coCd.equals('')">
		 		AND OUT_CO_CD = #{coCd}
		 </if>
		<if test="strtDt != null and !strtDt.equals('') and endDt != null and !endDt.equals('')">
		AND TRST_DT BETWEEN #{strtDt} AND #{endDt}
		</if>
		<if test="outCoCd != null and !outCoCd.equals('')">
		 		AND SELPCH_CD = #{selpchCd}
		 </if>
		 <if test="inCoCd != null and !inCoCd.equals('')">
				AND PRDT_IMP_YN = #{prdtImpYn}
		</if>
		ORDER BY TRST_NO
	</select>
	
	<select id="selectStockMoveStatMngmList" parameterType="Map" resultType="CamelMap">
		SELECT *
			FROM(
				SELECT
						ROWNUM AS RNUM, D.*
				FROM(		
				SELECT
					 A.TRST_NO
					,A.OUT_CO_CD
					,FN_CM05M01_CD_TO_NM(A.OUT_CO_CD) AS OUT_CO_NM
					,A.OUT_WH_CD
					,FN_CM05M01_CD_TO_NM(A.OUT_WH_CD) AS OUT_WH_NM
					,A.OWNER_CD
					,FN_CM05M01_CD_TO_NM(A.OWNER_CD) AS OWNER_NM
					,A.TYP_CD
					,FN_CM05M01_CD_TO_NM(A.TYP_CD) AS TYP_NM
					,A.MAKR_CD
					,FN_CM05M01_CD_TO_NM(A.MAKR_CD) AS MAKR_NM
					,A.PRDT_CD
					,C.PRDT_NM 
					,A.IMP_YN
					,FN_CM05M01_CD_TO_NM(A.IMP_YN) AS IMP_NM 
					,A.MO_WH
					,A.STD_UPR
					,A.IN_CO_CD
					,FN_CM05M01_CD_TO_NM(A.IN_CO_CD) AS IN_CO_NM
					,A.IN_WH_CD
					,FN_CM05M01_CD_TO_NM(A.IN_WH_CD) AS IN_WH_NM
					,A.IMP_YN
					,FN_CM05M01_CD_TO_NM(A.IMP_YN ) AS IMP_NM
					,A.PRDT_SIZE
					,A.PRDT_SPEC
					,A.PRDT_LEN
					,TO_CHAR(TO_DATE(A.TRST_DT, 'YYYYMMDD'),'YYYY-MM-DD') AS TRST_DT
					,A.UDT_DTTM
					,TO_CHAR(A.CREAT_DTTM,'YYYY-MM-DD') AS CREAT_DTTM
				FROM TB_SM02M01 A, TB_BM01M01 C
				WHERE A.PRDT_CD = C.PRDT_CD
				<if test="coCd != null and !coCd.equals('')">
		 			AND OUT_CO_CD = #{coCd}
		 		</if>
				<if test="strtDt != null and !strtDt.equals('') and endDt != null and !endDt.equals('')">
					AND TRST_DT BETWEEN #{strtDt} AND #{endDt}
				</if>
				<if test="outWhCd != null and !outWhCd.equals('')">
					AND OUT_WH_CD = #{outWhCd}
				 </if>
				 <if test="inWhCd != null and !inWhCd.equals('')">
					AND IN_WH_CD = #{inWhCd}
				</if>
				ORDER BY A.TRST_NO
			) D
		)
		WHERE
			RNUM BETWEEN #{firstIndex} AND #{lastIndex}
	</select>
	
	<select id="selectUprDtlCount" parameterType="Map" resultType="int">
		SELECT
			COUNT(*)
		FROM TB_SM01M01 A, TB_BM01M01 C, TB_BM02M01 E
		WHERE 1=1 
			AND A.PRDT_CD = C.PRDT_CD
			AND A.CLNT_CD = E.CLNT_CD
		<if test="coCd != null and !coCd.equals('')">
			AND CO_CD = #{coCd}
		</if>
		<if test="whCd != null and !whCd.equals('')">
		 	AND WH_CD = #{whCd}
		</if>
		<if test="clntNm != null and !clntNm.equals('')">
			AND E.CLNT_NM LIKE '%' || #{clntNm} || '%'
		</if>
		<if test="ownerCd != null and !ownerCd.equals('')">
			AND OWNER_CD = #{ownerCd}
		</if>
		<if test="typCd != null and !typCd.equals('')">
			AND TYP_CD = #{typCd}
		</if>
		<if test="makrCd != null and !makrCd.equals('')">
			AND MAKR_CD = #{makrCd}
		</if>
		<if test="impYn != null and !impYn.equals('')">
			AND IMP_YN = #{impYn}
		</if>
		<if test="prdtNm != null and !prdtNm.equals('')">
				AND C.PRDT_NM LIKE '%' || #{prdtNm} || '%'
		</if>
		<if test="prdtCoilYn != null and !prdtCoilYn.equals('')">
				AND C.PRDT_COIL_YN LIKE  #{prdtCoilYn}
		</if>
		ORDER BY CO_CD
	</select>
	
	<select id="selectStockMoveStatMngmDtlList" parameterType="Map" resultType="CamelMap">
		SELECT *
		FROM (
			SELECT
				ROWNUM AS RNUM, D.*
			FROM(
				SELECT 	  
						  A.STOK_SEQ
						, A.CO_CD
						, FN_CM05M01_CD_TO_NM(A.CO_CD) AS CO_NM
						, A.WH_CD
						, FN_CM05M01_CD_TO_NM(A.WH_CD) AS WH_NM
						, A.OWNER_CD
						, FN_CM05M01_CD_TO_NM(A.OWNER_CD) AS OWNER_NM
						, A.TYP_CD
						, FN_CM05M01_CD_TO_NM(A.TYP_CD) AS TYP_NM
						, A.MAKR_CD
						, FN_CM05M01_CD_TO_NM(A.MAKR_CD) AS MAKR_NM
						, A.PRJCT_CD
						, (SELECT PRJCT_NM FROM TB_SD05M01 WHERE PRJCT_CD = A.PRJCT_CD ) AS PRJCT_NM
						, A.PRDT_CD
				     	, C.PRDT_NM
						, A.TYP_CD
						, FN_CM05M01_CD_TO_NM(A.TYP_CD) AS TYP_NM
				     	, A.CLNT_CD
						, A.TYP_CD
						, FN_CM05M01_CD_TO_NM(A.TYP_CD) AS TYP_NM
				        , A.PRDT_SPEC
				        , A.PRDT_SIZE
				        , A.PRDT_LEN
				     	, E.CLNT_NM
					    , A.IMP_YN
						, FN_CM05M01_CD_TO_NM(A.IMP_YN) AS IMP_NM
						, A.STOCK_QTY
						, A.STOCK_UPR
						, A.STOCK_AMT
						, A.STD_UPR
						, A.PCHS_UPR
						, A.SELL_UPR
						, A.SELL_LAST_DT
						, A.PROPRT_STOCK_QTY
						, A.ODR_QTY
						, A.STOCK_CHG_CD
						, C.PRDT_COIL_YN
				FROM TB_SM01M01 A, TB_BM01M01 C, TB_BM02M01 E
				WHERE  A.PRDT_CD = C.PRDT_CD
				AND A.CLNT_CD = E.CLNT_CD(+)
				<if test="coCd != null and !coCd.equals('')">
					AND CO_CD = #{coCd}
				</if>
				<if test="whCd != null and !whCd.equals('')">
				 	AND WH_CD = #{whCd}
				</if>
				<if test="clntNm != null and !clntNm.equals('')">
					AND E.CLNT_NM LIKE '%' || #{clntNm} || '%'
				</if>
				<if test="ownerCd != null and !ownerCd.equals('')">
					AND OWNER_CD = #{ownerCd}
				</if>
				<if test="typCd != null and !typCd.equals('')">
					AND TYP_CD = #{typCd}
				</if>
				<if test="makrCd != null and !makrCd.equals('')">
					AND MAKR_CD = #{makrCd}
				</if>
				<if test="impYn != null and !impYn.equals('')">
					AND IMP_YN = #{impYn}
				</if>
				<if test="prdtNm != null and !prdtNm.equals('')">
						AND C.PRDT_NM LIKE '%' || #{prdtNm} || '%'
				</if>
				<if test="prdtCoilYn != null and !prdtCoilYn.equals('')">
						AND C.PRDT_COIL_YN LIKE  #{prdtCoilYn}
				</if>
			)D
		)
		WHERE
			RNUM BETWEEN #{firstIndex} AND #{lastIndex}
	</select>
	
	<!-- <select id="sm01CheckCnt" parameterType="Map" resultType="int">
		SELECT COUNT(*) 
		  FROM TB_SM01M01
		 WHERE CO_CD = #{coCd}
		   AND WH_CD = #{mWhCd}
		   AND TYP_CD = #{mTypCd} 
		   AND MAKR_CD = #{mMakrCd} 
		   AND OWNER_CD = #{mOwnerCd}
		   AND PRDT_CD = #{mPrdtCd} 
		   AND IMP_YN = #{mImpYn} 
		   AND PRJCT_CD = #{mPrjctCd}
	</select> -->
	
	<!-- <insert id="sm01InsertStockMove" parameterType="Map">
		INSERT INTO TB_SM01M01
		(
		   CO_CD,
		   WH_CD,
		   PRDT_CD,
		   OWNER_CD,
		   CLNT_CD,
		   TYP_CD,
		   MAKR_CD,
		   PRJCT_CD,
		   IMP_YN,
		   STOCK_QTY,
		   STOCK_UPR,
		   STOCK_AMT,
		   STD_UPR,
		   PCHS_UPR,
		   SELL_UPR,
		   PROPRT_STOCK_QTY,
		   STOCK_CHG_CD,
		   CREAT_ID,
		   CREAT_PGM, 
		   UDT_DTTM
		)
		SELECT 
		   #{sCoCd},
		   #{sWhCd},
		   PRDT_CD,
		   OWNER_CD,
		   CLNT_CD,
		   TYP_CD,
		   MAKR_CD,
		   PRJCT_CD,
		   IMP_YN,
		   #{sMoveQty},
		   STOCK_UPR,
		   STOCK_AMT,
		   STD_UPR,
		   PCHS_UPR,
		   SELL_UPR,
		   PROPRT_STOCK_QTY,
		   'STOCKCHG6',
		   #{userId},
		   'SM0201P01', 
		   SYSDATE
		FROM TB_SM01M01
		WHERE CO_CD = #{mCoCd} 
		  AND WH_CD = #{mWhCd}
		  AND TYP_CD = #{mTypCd} 
		  AND MAKR_CD = #{mMakrCd} 
		  AND OWNER_CD = #{mOwnerCd}
		  AND PRDT_CD = #{mPrdtCd} 
		  AND IMP_YN = #{mImpYn} 
		  AND PRJCT_CD = #{mPrjctCd}
	</insert> -->
	
	<update id="sm01UpdateStockMove" parameterType="Map">
		UPDATE TB_SM01M01 SET
			STOCK_QTY = #{stockQty}-#{moveQty}
		WHERE STOK_SEQ = #{stokSeq}
	</update>
	
	<update id="sm01UpdateInsertStockMove" parameterType="Map">
		MERGE INTO TB_SM01M01 A
		USING (
		   SELECT
		   STOK_SEQ,
		   CO_CD,
		   #{sWhCd} AS WH_CD,
		   PRDT_CD,
		   PRDT_SIZE,
		   PRDT_SPEC,
		   PRDT_LEN,
		   OWNER_CD,
		   CLNT_CD,
		   #{sellType} AS TYP_CD,
		   MAKR_CD,
		   PRJCT_CD,
		   IMP_YN,
		   #{moveQty} AS STOCK_QTY,
		   STOCK_UPR,
		   STOCK_AMT,
		   STD_UPR,
		   PCHS_UPR,
		   SELL_UPR,
		   PROPRT_STOCK_QTY,
		   'STOCKCHG6',
		   #{userId},
		   #{pgmId}, 
		   SYSDATE FROM TB_SM01M01
		   WHERE  STOK_SEQ = #{stokSeq}) S 
		ON (
			  A.CO_CD     = S.CO_CD
		  AND A.WH_CD     = S.WH_CD
		  AND A.CLNT_CD   = S.CLNT_CD
		  AND A.TYP_CD    = S.TYP_CD
		  AND A.MAKR_CD   = S.MAKR_CD
		  AND A.OWNER_CD  = S.OWNER_CD
		  AND A.PRDT_CD   = S.PRDT_CD
		  AND A.IMP_YN    = S.IMP_YN
		  AND A.PRJCT_CD  = S.PRJCT_CD
		  AND NVL(A.PRDT_SIZE,0) = NVL(S.PRDT_SIZE,0)
		  AND NVL(A.PRDT_SPEC,0) = NVL(S.PRDT_SPEC,0)
		  AND NVL(A.PRDT_LEN,0)  = NVL(S.PRDT_LEN,0)
		)
		WHEN MATCHED THEN 
			UPDATE SET   ( STOCK_QTY ) = ( SELECT STOCK_QTY + #{moveQty} AS STOCK_QTY FROM TB_SM01M01 
			 	                            WHERE STOK_SEQ   = A.STOK_SEQ )
		WHEN NOT MATCHED THEN 
		INSERT
		(
		   STOK_SEQ,
		   CO_CD,
		   WH_CD,
		   PRDT_CD,
		   PRDT_SIZE,
		   PRDT_SPEC,
		   PRDT_LEN,
		   OWNER_CD,
		   CLNT_CD,
		   TYP_CD,
		   MAKR_CD,
		   PRJCT_CD,
		   IMP_YN,
		   STOCK_QTY,
		   STOCK_UPR,
		   STOCK_AMT,
		   STD_UPR,
		   PCHS_UPR,
		   SELL_UPR,
		   PROPRT_STOCK_QTY,
		   STOCK_CHG_CD,
		   CREAT_ID,
		   CREAT_PGM, 
		   UDT_DTTM
		)VALUES(
		   TB_SM01M01_SQ01.NEXTVAL, 
		   S.CO_CD,
		   S.WH_CD,
		   S.PRDT_CD,
		   S.PRDT_SIZE,
		   S.PRDT_SPEC,
		   S.PRDT_LEN,
		   S.OWNER_CD,
		   S.CLNT_CD,
		   S.TYP_CD,
		   S.MAKR_CD,
		   S.PRJCT_CD,
		   S.IMP_YN,
		   S.STOCK_QTY,
		   S.STOCK_UPR,
		   S.STOCK_AMT,
		   S.STD_UPR,
		   S.PCHS_UPR,
		   S.SELL_UPR,
		   S.PROPRT_STOCK_QTY,
		   'STOCKCHG6',
		   #{userId},
		   #{pgmId}, 
		   SYSDATE)
	</update>
	
	<insert id="sm02InsertStockMove" parameterType="Map">
		INSERT INTO TB_SM02M01
		(
			TRST_NO, 
			OUT_CO_CD,	
			OUT_WH_CD, 
			OWNER_CD,
			CLNT_CD, 
			TYP_CD, 
			MAKR_CD, 
			PRJCT_CD, 
			PRDT_CD, 
			PRDT_SIZE,
		    PRDT_SPEC,
		    PRDT_LEN,
			IMP_YN, 
			IN_CO_CD, 
			IN_TYP_CD, 
			IN_WH_CD, 
			STOCK_UPR, 
			STD_UPR,
			PCHS_UPR, 
			SELL_UPR,	
			MO_WH, 
			RMK,	
			CREAT_ID, 
			CREAT_PGM, 
			CREAT_DTTM, 
			TRST_DT				
		)
	 	VALUES
	 	(
			TB_SM02M01_SQ01.NEXTVAL, 
			#{coCd}, 
			#{whCd}, 
			#{ownerCd}, 
			#{clntCd},
			#{typCd}, 
			#{makrCd},
			#{prjctCd}, 
			#{prdtCd}, 
			#{prdtSize},
			#{prdtSpec},
			#{prdtLen},
			#{impYn},
			#{coCd}, 
			#{sellType}, 
			#{sWhCd},	
			#{stockUpr},
			#{stdUpr}, 
			#{pchsUpr}, 
			#{sellUpr},
			#{moveQty},
			#{sRmk},
			#{userId}, 
			#{pgmId}, 
			sysdate, 
			TO_CHAR(TO_DATE(#{sTransDt}, 'YYYY-MM-DD'),'YYYYMMDD')
	 	)
	</insert>
	
	<update id="sm01UpdateInsertBarterStockMove" parameterType="Map">
		MERGE INTO TB_SM01M01 A
		USING (
		   SELECT 
		   STOK_SEQ,
		   CO_CD,
		   #{sWhCd}     AS WH_CD,
		   #{sPrdtCd}   AS PRDT_CD,
		   #{sPrdtSize} AS PRDT_SIZE,
		   #{sPrdtSpec} AS PRDT_SPEC,
		   #{sPrdtLen}  AS PRDT_LEN,
		   OWNER_CD,
		   CLNT_CD,
		   #{sellType} AS TYP_CD,
		   MAKR_CD,
		   PRJCT_CD,
		   IMP_YN,
		   #{moveQty} AS STOCK_QTY,
		   STOCK_UPR,
		   STOCK_AMT,
		   STD_UPR,
		   PCHS_UPR,
		   SELL_UPR,
		   PROPRT_STOCK_QTY,
		   'STOCKCHG6',
		   #{userId},
		   #{pgmId}, 
		   SYSDATE FROM TB_SM01M01
		   WHERE STOK_SEQ = #{stokSeq})S 
		ON (
			  A.CO_CD     = S.CO_CD
		  AND A.WH_CD     = S.WH_CD
		  AND A.CLNT_CD   = S.CLNT_CD
		  AND A.TYP_CD    = S.TYP_CD
		  AND A.MAKR_CD   = S.MAKR_CD
		  AND A.OWNER_CD  = S.OWNER_CD
		  AND A.PRDT_CD   = S.PRDT_CD
		  AND A.IMP_YN    = S.IMP_YN
		  AND A.PRJCT_CD  = S.PRJCT_CD
		  AND NVL(A.PRDT_SIZE,0) = NVL(S.PRDT_SIZE,0)
		  AND NVL(A.PRDT_SPEC,0) = NVL(S.PRDT_SPEC,0)
		  AND NVL(A.PRDT_LEN,0)  = NVL(S.PRDT_LEN,0)
		)
		WHEN MATCHED THEN 
			UPDATE SET   ( STOCK_QTY ) = ( SELECT STOCK_QTY + #{moveQty} AS STOCK_QTY FROM TB_SM01M01 
			 	                            WHERE STOK_SEQ   = A.STOK_SEQ )
		WHEN NOT MATCHED THEN 
		INSERT
		(
		   STOK_SEQ,
		   CO_CD,
		   WH_CD,
		   PRDT_CD,
		   PRDT_SIZE,
		   PRDT_SPEC,
		   PRDT_LEN,
		   OWNER_CD,
		   CLNT_CD,
		   TYP_CD,
		   MAKR_CD,
		   PRJCT_CD,
		   IMP_YN,
		   STOCK_QTY,
		   STOCK_UPR,
		   STOCK_AMT,
		   STD_UPR,
		   PCHS_UPR,
		   SELL_UPR,
		   PROPRT_STOCK_QTY,
		   STOCK_CHG_CD,
		   CREAT_ID,
		   CREAT_PGM, 
		   UDT_DTTM
		)VALUES(
		   TB_SM01M01_SQ01.NEXTVAL,
		   S.CO_CD,
		   S.WH_CD,
		   S.PRDT_CD,
		   S.PRDT_SIZE,
		   S.PRDT_SPEC,
		   S.PRDT_LEN,
		   S.OWNER_CD,
		   S.CLNT_CD,
		   S.TYP_CD,
		   S.MAKR_CD,
		   S.PRJCT_CD,
		   S.IMP_YN,
		   S.STOCK_QTY,
		   S.STOCK_UPR,
		   S.STOCK_AMT,
		   S.STD_UPR,
		   S.PCHS_UPR,
		   S.SELL_UPR,
		   S.PROPRT_STOCK_QTY,
		   'STOCKCHG6',
		   #{userId},
		   #{pgmId}, 
		   SYSDATE)
	</update>
	
	<insert id="sm02InsertBarterStockMove" parameterType="Map">
		INSERT INTO TB_SM02M01
		(
			TRST_NO, 
			OUT_CO_CD,	
			OUT_WH_CD, 
			OWNER_CD,
			CLNT_CD, 
			TYP_CD, 
			MAKR_CD, 
			PRJCT_CD, 
			PRDT_CD,
			PRDT_SIZE,
		    PRDT_SPEC,
		    PRDT_LEN, 
			IMP_YN, 
			IN_CO_CD, 
			IN_TYP_CD,
			IN_WH_CD, 
			STOCK_UPR, 
			STD_UPR,
			PCHS_UPR, 
			SELL_UPR,	
			MO_WH, 
			RMK,	
			CREAT_ID, 
			CREAT_PGM, 
			CREAT_DTTM, 
			TRST_DT				
		)
	 	VALUES
	 	(
			TB_SM02M01_SQ01.NEXTVAL, 
			#{coCd}, 
			#{whCd}, 
			#{ownerCd}, 
			#{clntCd},
			#{typCd}, 
			#{makrCd},
			#{prjctCd}, 
			#{sPrdtCd}, 
			#{sPrdtSize},
			#{sPrdtSpec},
			#{sPrdtLen},
			#{impYn},
			#{coCd}, 
			#{sellType}, 
			#{sWhCd},	
			#{stockUpr},
			#{stdUpr}, 
			#{pchsUpr}, 
			#{sellUpr},
			#{moveQty},
			#{sRmk},
			#{userId}, 
			#{pgmId}, 
			SYSDATE, 
			TO_CHAR(TO_DATE(#{sTransDt}, 'YYYY-MM-DD'),'YYYYMMDD')
	 	)
	</insert>
	
</mapper>